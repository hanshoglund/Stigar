; load "~/Stigar/Stigar.vitry"

module Hans.Music.Stigar


NOTE_ON        = 144
NOTE_OFF       = 128
CONTROL_CHANGE = 176
PEDAL          = 64

DEVICE         = "Port 8"
CHANNEL        = 0


help _ = do print "========================================"
            print " Stigar"
            print "    p () to print devices "
            print "    r () to run piece     "
            print "                          "

p _    = printDevices ()

r _    = do
            ; dev = deviceByName DEVICE                            ; FIXME gets wrong dev
            dev = getMidiDevice (nth 20 (getMidiDeviceInfo ()))
            (method MidiDevice "open" ()) dev
            recv = (method MidiDevice "getReceiver" ()) dev      
            ; test recv
            play recv
            
            (method MidiDevice "close" ()) dev
            (method MidiDevice "isOpen" ()) dev



events = [(60, 5, 0), (62, 5, 1500), (60, 0, 0), (62, 0, 0)]
    


; Plays a list of events
; Blocks the current thread
;   [(pitch, vel, dur)] -> [(pitch, vel, dur)]
play r = print (foldl playEvent r events) 

playEvent r (pitch, vel, dur) = 
    do  on r pitch vel
        sleep dur
        r
    





test r =
    do ped r true
      sleep 500
      on r  80 80
      sleep 500
      off r 80
      sleep 500
      on r  80 80
      sleep 500
      off r 80
      ped r false
      sleep 1000






; ============================================================

MidiSystem        = class "javax.sound.midi.MidiSystem"
MidiDevice        = class "javax.sound.midi.MidiDevice"
MidiDeviceInfo    = class "javax.sound.midi.MidiDevice$Info"
MidiMessage       = class "javax.sound.midi.MidiMessage"
ShortMessage      = class "javax.sound.midi.ShortMessage"
Receiver          = class "javax.sound.midi.Receiver"
BigInteger        = class "java.math.BigInteger"

getMidiDeviceInfo = method MidiSystem "getMidiDeviceInfo" () .. seq
getMidiDevice     = method MidiSystem "getMidiDevice" [ MidiDeviceInfo ]
setMessage        = method ShortMessage "setMessage" [ `int, `int, `int, `int ]
send              = method Receiver "send" [ MidiMessage, `long ]
intValue          = method BigInteger "intValue" ()
longValue         = method BigInteger "longValue" ()

printDevices _ = do (print "\nDevices:")
                    map (string .. (++ "    ") .. print) 
                        (getMidiDeviceInfo ())

deviceByName name = 
    getMidiDevice 
        find (string .. (== name))
            getMidiDeviceInfo ()


makeMsg cmd ch data1 data2 =
    do  msg = new ShortMessage
        setMessage msg (intValue cmd) (intValue ch) (intValue data1) (intValue data2)
        msg

sendMsg recv msg =
    send recv msg (longValue 0)
    
on  r pitch vel = sendMsg r (makeMsg NOTE_ON CHANNEL pitch vel)
off r pitch     = sendMsg r (makeMsg NOTE_OFF CHANNEL pitch 0)
ped r down      =
    if down
        sendMsg r (makeMsg CONTROL_CHANGE CHANNEL PEDAL 127)
        sendMsg r (makeMsg CONTROL_CHANGE CHANNEL PEDAL 0)

sleep           = longValue .. method (class "Thread") "sleep" [ `long ]




; ============================================================




find pred = foldl (fn (x y) if (pred y) y else x) ()


(&&) x y = 
    match (x, y)
        (_:true, _:true) = true
        (_:bool, _:bool) = false

(||) x y = 
    match (x, y)
        (_:true, _:bool) = true
        (_:bool, _:true) = true
        (_:bool, _:bool) = false
            
(!=) x y = not (x == y)
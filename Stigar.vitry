; load "~/Stigar/Stigar.vitry"

; =============================================================================
; Stigar - for player piano
; Hans Hoglund (2011)
; Vitry v0.1.0
; =============================================================================
module Hans.Music.Stigar


; DEVICE_NUM    = 3
DEVICE_NUM      = 20
DEVICE_NAME     = "Port 8"
FETCH_DEV_BY    : (`num | `name) = `num

CHANNEL         = 0
TEST_PITCH      = 108
; BUFFER_LENGTH = 20000
BUFFER_LENGTH   = 2000
                   
MIN_PITCH       = 21
NUM_PITCHES     = 88
MAX_PITCH       = MIN_PITCH + NUM_PITCHES - 1
SAFETY          = 7

down     = `down
up       = `up
unaCorda = `unaCorda
treCorde = `treCorde
reset    = `reset

numEvents = set (ref ()) 0

; ============================================================

testSeq = [down, unaCorda, (TEST_PITCH, 20, 500), (TEST_PITCH, 0, 0), up, treCorde]
                     
; ============================================================
; Generate event stream

; Walk one value up or down
walk start  = unfold (fn (x) (x, (x + (random 2) * 2 - 1))) start 

; Walk n values up or down
walkn n start = 
    let direction = posOrNeg (1/2)
        path = map (+ start) (map direction (1 ... (n + 1))) 
        final = last path
        path ++ delay (fn (_) walkn n final)

; As walkn, but avoid to get outside keyboard range 
walknWeighted n start = 
    let direction = if (start < MIN_PITCH + SAFETY) id (if (start > MAX_PITCH - SAFETY) negate posOrNeg (1/2))
        path = map (+ start) (map direction (1 ... (n + 1))) 
        final = last path
        path ++ delay (fn (_) walkn n final)
        
posOrNeg weight =
    if (randomFloat () < approx weight)
        id
        negate
    
    
alternateOff xs = interlL xs (repeat 0)
randoms n = (map (fn (x) random n) (repeat 1))

walkAndSplitWith n start step xs ys = ;do print "forking" 
    let path  = take n (walknWeighted step start)
        xs1   = take n xs
        ys1   = take n ys
        xs2   = drop n xs 
        ys2   = drop n ys 
        final = last path
        zip3 (dup path) (alternateOff (take n xs)) (alternateOff (take n ys))
            ++ delay (fn (_) 
                interlL 
                    walkAndSplitWith n (final - 0) step xs2 (repeat 0) 
                    walkAndSplitWith n (final + 0) step xs2 ys2       )

toPitches f xs = 
    (flip map) xs
        fn (x) match x
            (p, v, d) = (f p, v, d)
            x         = x

; Lazily insert one element of xs after n elements of ys
; [a] -> [int] -> [a] -> [a]
insertAfter xs ns ys =
    let x = head xs
        n = head ns
        take n ys ++ [x] ++ delay (fn (_) insertAfter (tail xs) (tail ns) (drop n ys))

events = 
    let _ = _
        part1 = take 200
            [down] ++ insertAfter (repeat down) (repeat 1000)
                walkAndSplitWith 400 60 7 (repeat 1) (repeat 70)
        part2 = [up, treCorde]
        part3 = take 1200
            [down] ++ insertAfter (repeat down) (repeat 1000)
                walkAndSplitWith 400 60 7 (repeat 60) (repeat 70)
        
        ; Assemble the piece
        ; The number of events here must be > the total number of
        ; events in the parts!
        take 500 
            part1 ++ [reset] 
            ++ part2 
            ++ [reset] 
            ++ part3





; ============================================================
; Main program

help _ = do print "============================================================"
            print " Stigar - for player piano                                  "
            print " Hans Hoglund (2011)                                        "
            print "============================================================"
            print "    p () or printDevices ()                                 "
            print "    t () or test ()                                         "
            print "    r () or run ()                                          "
            print "    o () or allOff ()                                       "
            print "============================================================"


test _ = do dev = device ()
            recv = openDevAndFetchRecv dev
            playAll recv testSeq
            closeDev dev
            ()

run _  = do dev = device ()
            recv = openDevAndFetchRecv dev
            playAll recv events
            sleep 2000
            sendAllOff recv
            closeDev dev
            ()
            
allOff _  = do   
            dev = device ()
            recv = openDevAndFetchRecv dev
            sendAllOff recv
            closeDev dev
            ()


; Play a list of events on the current thread
;
;   receiver [(pitch, vel, dur)] -> receiver
playAll r events = foldl playEvent r events

playEvent r action =
    do  
        n = (get numEvents)
        set numEvents (n + 1)
        if (n % 100 == 0) (print n) else ()

        match action
            (pitch, vel, dur) = do 
                                  ; print (pitch, vel, dur) 
                                  on r pitch vel
                                  sleep dur 
                                  r
            _ : down            = do ped r true
                                  r
            _ : up              = do ped r false
                                  r
            _ : unaCorda        = do ucPed r true
                                  r
            _ : treCorde        = do ucPed r false
                                  r
            _ : reset           = do sendAllOff r
                                  r

sendAllOff r = 
    do force 
           map (fn (i) (off recv i)) (1 ... 128)
       ped r false
       ucPed r false


p _ = printDevices ()
t _ = test ()
r _ = run ()
o _ = allOff ()





; ============================================================
; MIDI backend

NOTE_ON        = 144
NOTE_OFF       = 128
CONTROL_CHANGE = 176
SOST_PED       = 64
UNA_CORDA_PED  = 67

MidiSystem        = class "javax.sound.midi.MidiSystem"
MidiDevice        = class "javax.sound.midi.MidiDevice"
MidiDeviceInfo    = class "javax.sound.midi.MidiDevice$Info"
MidiMessage       = class "javax.sound.midi.MidiMessage"
ShortMessage      = class "javax.sound.midi.ShortMessage"
Receiver          = class "javax.sound.midi.Receiver"
Number            = class "java.lang.Number"

getMidiDeviceInfo = method MidiSystem "getMidiDeviceInfo" () .. seq
getMidiDevice     = method MidiSystem "getMidiDevice" [ MidiDeviceInfo ]
setMessage        = method ShortMessage "setMessage" [ `int, `int, `int, `int ]
send              = method Receiver "send" [ MidiMessage, `long ]
intValue          = method Number "intValue" ()
longValue         = method Number "longValue" ()

printDevices _ = do print "\nDevices:"
                    join "\n" (getMidiDeviceInfo ())
deviceByName name = getMidiDevice
                        find (string .. (== name)) (getMidiDeviceInfo ())
deviceByNum n     = getMidiDevice
                        index n (getMidiDeviceInfo ())
device _          = match FETCH_DEV_BY
                        _:`num = deviceByNum DEVICE_NUM
                        _:`name = deviceByName DEVICE_NAME
openDevAndFetchRecv dev =
    do (method MidiDevice "open" ()) dev
       (method MidiDevice "getReceiver" ()) dev
closeDev = method MidiDevice "close" ()

makeMsg cmd ch data1 data2 =
    do  msg = new ShortMessage
        setMessage msg (intValue cmd) (intValue ch) (intValue data1) (intValue data2)
        msg

sendMsg recv msg =
    send recv msg (longValue 0)


on  r pitch vel = if (pitch > MIN_PITCH && pitch < (MIN_PITCH + NUM_PITCHES)) 
                      sendMsg r (makeMsg NOTE_ON CHANNEL pitch vel)
                      ()
; on  r pitch vel = sendMsg r (makeMsg NOTE_ON CHANNEL pitch vel)


off r pitch     = sendMsg r (makeMsg NOTE_OFF CHANNEL pitch 0)
ped r down      =
    if down
        sendMsg r (makeMsg CONTROL_CHANGE CHANNEL SOST_PED 64)
        sendMsg r (makeMsg CONTROL_CHANGE CHANNEL SOST_PED 0)
ucPed r down    =
    if down
        sendMsg r (makeMsg CONTROL_CHANGE CHANNEL UNA_CORDA_PED 64)
        sendMsg r (makeMsg CONTROL_CHANGE CHANNEL UNA_CORDA_PED 0)
; res r           = sendMsg r (makeMsg 123 0 0 0)
; sleep           = longValue .. method (class "Thread") "sleep" [ `long ]




; ============================================================

main = do allOff ()
          help ()

